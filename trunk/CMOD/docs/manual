Environment for Music Composition and Sonification (EMCS)

Components:
    CMOD    - Computer-assisted Composition
		Input: 	composer generated data describing the composition.
		Output: numerical data to be used as input for
				sound synthesis (SYN)
				score notation (GRAF)
				vizualization (VIZIR)

    GRAF    - Automatic notation of music scores
		Input:	numerical data from COMPASS or SNIF
		Output: commands and data to drive music notation/editing
			software.

    SNIF    - Sonification of Complex Scientific Data
		Input:	computer generated scientific data
		Output: numerical data to be used as input for
				sound synthesis (SYN)
				score notation (GRAF)
				vizualization (VIZIR)

    LASS    - Sound Synthesis
		Input:	numerical data from CMOD or SNIF
		Output:	audio (sound) file

    VIZIR   - Visualization of Sounds (in a virtual environment)
		Input:	numerical data from COMPASS or SNIF
		Output: images on the screen or 3D images in a virtual
  			environment using available graphics library


	   			 	VIZIR	
	composer

		CMOD    	  	LASS			SNIF

								    complex data
				   	 GRAF




			  CMOD - description

CMOD is an object-oriented library written in C++.  It includes classes
dealing with various aspects of a composition and a number of utilities.
The former inherit from a generic EVENT; the latter consist mostly of 
selection procedures, envelope-functions (of time) building and file handling 
procedures.

Each EVENT contains an arbitrary number of LAYERS and each LAYER contains
an arbitrary number of OBJECTS of various TYPES.  An OBJECT could itself 
be an EVENT containing other OBJECTS.  Various EVENTS are named: TOP, HIGH, 
LOW, and BOTTOM.  Any number of such events can be added as needed. The 
objects of the BOTTOM event are sounds, notes in a score, or visual objects; 
they are not EVENTS.

The EVENT class has two main methods: Build and CreateNewObjects.

Build calls three methods:
	- LayerDef determines how many layers does the EVENT have and how 
	   many types of objects are in each layer.
	- NumObjs determines the number of objects in the event either by 
	   reading the number from a file or by deriving it from the layers'
	   densities.
	- CopyName reads the names of the files defining the elements of the 
	   next level (event).

CreateNewObjects is a loop whose upper limit is the number of objects contained
in the event.  A pass through the loop corresponds to the creation of a new
object.  All objects/events have a minimum of three atributes: start time,
duration, and type.  These atributes are selected either using continuous
probabilities (CONTINUUM), using discrete values (DISCRETE), or their values are
read from a file (READ).
	- Continuum3 selects a start time, duration, and type using a stochastic 
	   distribution according to one of the methods available in Stochos 
	   (see utility).
	- Discrete3 selects a start time, duration, and type using two matrices
	   (see matrix) employing a more complicated procedure.  During the first
	   time through the loop three functions are called:
		- AttackMethods offers three choices for choosing start times:
			- GoldenMean uses Stimes to creates an array of start
			   times (starTarray) and  Weights utility to create
			   another array of probabilities (probSievArray).
				- Stimes calls the utility GSection.
			- PointsProbs (the POINTS option) reads from a file the
			   starTarray and the probSievArray.
			- Attacks creates the starTarray using the BuildSieve
			   utility and probSieveArray using Weights utility.
		- DurationMethods offers three choices for choosing durations:
			- Fit (not available yet)
			- PointsProbs (the INTERVALS option) reads from a file
			   the durArray and the probDurArray
			- Modulo (not available yet)
		- CreateMatrices creates a generic matrix of size attacks * object
		   types using Matrix::Vectors and Matrix::Envelopes.  It also
		   creates a matrix of duration * object types using the same
		   functions of the Matrix class.
	  For each pass through the loop, Discrete3 itself calls:
		- ObjCoordinates creates a clone of the original matrix and
		   includes weights (probabilities) of its elements then chooses
		   a start time and an object type. Uses Matrix::BuildMatrix
		   and Matrix::ChooseM.
		- Adjustments determines the layer the object belongs to and
		   the number of remainng objects ( which were not created yet).  
                   It calls:
			- FindDur calls:
				- FindLen finds the matrix location corresponding
				   to the end of the event.
			   then creates a clone of the duration matrix and
			   calls Matrix::TrimMatrix and Matrrix::ChooseM
			- Matrix::AdjustMatrix (see matrix)
			- Matrix::AdjustVector (see matrix)
		- TimeConvert converts the start time and duration defined in
		   matrix location into time units (for notation) and to seconds.
		   It also determines the checkPoint or where this object is in 
		   the larger event.
	- SelectNextEvent checks the name and type of the object and creates a
	   new event (constructor).  Calls:
		- <newObject>.Print (specific for each object)
		- <newObject>.Build (generic)
		- <newObject>.CreateNewObjects (specific for bottom).

The BOTTOM class inherits from the EVENT class.  CreateNewObjects is a copy of the
function with the same name in EVENT except that instead of calling SelectNextEvent, 
it  calls:
	- Implement has three options chosen according to the file names it reads:
	   sound, note (not available yet), and visual (not available yet).
		- The sound option creates an empty sound object and assigns the
		   start time and duration already computed (see above). It then
		   calls:
			- AssignFrequency
			- Loud
			- NumPart
			- ReadComputerFloat to determine the deviation
			- Spectrum
			- SoundModifiers
			- Spatialization
			- Reverberation
			- PrintSound

