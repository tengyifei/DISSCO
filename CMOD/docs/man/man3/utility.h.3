.TH "utility.h" 3 "12 Feb 2007" "CMOD" \" -*- nroff -*-
.ad l
.nh
.SH NAME
utility.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <iostream>\fP
.br
\fC#include <fstream>\fP
.br
\fC#include '../../LASS/src/Envelope.h'\fP
.br
\fC#include 'linkList.h'\fP
.br
\fC#include 'filevalue.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBValuePick\fP (double checkPoint, float absRange)"
.br
.ti -1c
.RI "int \fBvaluePick\fP (double checkpoint, float absRange, Envelope *envLow, Envelope *envHigh, Envelope *envDist, const  char *eMethod, vector< int > eArgVect, const  char *wMethod, vector< int > wArgVect, const  char *modifyMethod)"
.br
.ti -1c
.RI "float \fBValueFloat\fP (double checkPoint, int envNum[], float coef[])"
.br
.ti -1c
.RI "float \fBValueFloat\fP (double checkPoint, vector< int > envNum, vector< float > coef)"
.br
.ti -1c
.RI "double \fBChoose\fP (double from, double to)"
.br
.ti -1c
.RI "void \fBCumulArray\fP (double array[], int size)"
.br
.ti -1c
.RI "void \fBCumulWeights\fP (\fBList\fP< double > &aList)"
.br
.ti -1c
.RI "int \fBChooseL\fP (\fBList\fP< double > &aList, \fBList\fP< int > &bList)"
.br
.ti -1c
.RI "float \fBStochos\fP (double checkPoint, int offset)"
.br
.ti -1c
.RI "float \fBStochos\fP (double checkPoint, int offset, const  char *method, vector< int > envNums, vector< float > scale)"
.br
.ti -1c
.RI "float \fBStochos\fP (double checkPoint, int offset, const  char *method, vector< Envelope * > envNums)"
.br
.ti -1c
.RI "int \fBReadComputeInt\fP (double checkPoint, int offset)"
.br
.ti -1c
.RI "float \fBReadComputeFloat\fP (double checkPoint, int offset)"
.br
.ti -1c
.RI "void \fBNonReadCompute\fP ()"
.br
.ti -1c
.RI "string \fBReadComputeChars\fP (double checkPoint, int offset)"
.br
.ti -1c
.RI "int \fBFrequencyStep\fP (double checkPoint, int newObj, int type, char *keepName)"
.br
.ti -1c
.RI "Envelope * \fBEnvelopeBuilder\fP (char *method, Collection< xy_point > *xy_pts, Collection< envelope_segment > *segs, double checkPoint, int offset, double check, int envNum)"
.br
.ti -1c
.RI "Envelope * \fBEnvelopeBuilder\fP (char *method, Collection< xy_point > *xy_pts, Collection< envelope_segment > *segs, double checkPoint, int offset, double check, int envNum, int numSegs)"
.br
.ti -1c
.RI "float \fBenvValue\fP (double checkPoint, int envNum, float coef)"
.br
.ti -1c
.RI "Envelope * \fBFitEnvelope\fP (double checkPoint, int offset)"
.br
.ti -1c
.RI "Envelope * \fBSelectEnvType\fP (double checkPoint, int newObj, int type, double check, int offset, char *\fBfileName\fP)"
.br
.ti -1c
.RI "Envelope * \fBMakeEnvelope\fP (double checkPoint, int offset, double check)"
.br
.ti -1c
.RI "Envelope * \fBSegmentBuilder\fP (double check)"
.br
.ti -1c
.RI "void \fBNonEnv\fP ()"
.br
.ti -1c
.RI "int \fBChooseOffset\fP (int first, int second)"
.br
.ti -1c
.RI "float \fBSequence\fP (int offset)"
.br
.ti -1c
.RI "string \fBCharSequence\fP (int offset)"
.br
.ti -1c
.RI "float \fBSoundsPerSec\fP (float dens)"
.br
.ti -1c
.RI "float \fBSoundsPerSec\fP (float dens, int areas, int underOne)"
.br
.ti -1c
.RI "void \fBGSection\fP (\fBList\fP< int > &aList, int levels)"
.br
.ti -1c
.RI "double \fBRandomSource\fP ()"
.br
.ti -1c
.RI "double \fBRandRange\fP (float low, float high)"
.br
.ti -1c
.RI "double \fBRandomTri\fP (float low, float high)"
.br
.ti -1c
.RI "float \fBPreferedValueDistribution\fP (float value, double checkPoint)"
.br
.ti -1c
.RI "bool \fBChance\fP (int goFlag, double checkPoint, int offset)"
.br
.ti -1c
.RI "bool \fBChance\fP (double checkPoint, Envelope *chanceEnv)"
.br
.ti -1c
.RI "double \fBRandomizer\fP ()"
.br
.ti -1c
.RI "int \fBChooseA\fP (double probs[], int size)"
.br
.ti -1c
.RI "float \fBChooseFromList\fP (float array[], int size)"
.br
.ti -1c
.RI "void \fBFlatDistribution\fP (\fBList\fP< double > &aProbList)"
.br
.ti -1c
.RI "int \fBRandomNumber\fP (int lowNum, int highNum)"
.br
.ti -1c
.RI "void \fBWeights\fP (double \fBprobArray\fP[], int listLen)"
.br
.ti -1c
.RI "void \fBClear\fP (double \fBprobArray\fP[], int arraySize)"
.br
.ti -1c
.RI "double \fBExponential\fP (int step, double extra)"
.br
.ti -1c
.RI "float \fBSum\fP (double array[], int size)"
.br
.ti -1c
.RI "void \fBNormalize\fP (double array[], int size)"
.br
.ti -1c
.RI "void \fBTestLibrary\fP ()"
.br
.ti -1c
.RI "void * \fBEvaluate\fP (\fBFileValue\fP *value)"
.br
.ti -1c
.RI "\fBFileValue\fP \fBSelect\fP (std::list< \fBFileValue\fP > l, int n)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "double * \fBprobArray\fP"
.br
.ti -1c
.RI "int \fBsever\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "bool Chance (double checkPoint, Envelope * chanceEnv)"
.PP
Definition at line 1558 of file utility.cpp.
.PP
References Random::Rand().
.PP
Referenced by Bottom::Modifiers(), Bottom::Reverberation(), and Bottom::Spatialization().
.SS "bool Chance (int goFlag, double checkPoint, int offset)"
.PP
Returns a value of TRUE or FALSE for the comparison: randomNumber <= probability and it is used to force one of these values. The goFlag is initialized to 0 for the first time Chance is called. If the probability (which is read in) has the value of -1 (< 0), it is assigned the value of the goFlag (either 0 or 1) thus influencing the outcome of the next call. The value of 1 is assigned (in the calling function, not in here) if the comparison was successful (TRUE). If 0 < probability < 1 the outcome depends of the comparison with randomNumber. If the probability > 1 it becomes 0 if goFlag = 1, i.e. if a similar param has already been assigned.
.PP
In the case of parameters which are dependent of one another, the first (influencing) parameter should have a probability assigned while the subsequent (dependent) parameters should be assigned a value < 0.
.PP
In the case of competing aspects of the same parameter (e.g. glissando and detuning) the second one is selected ONLY if the first one was not. 
.PP
\fBParameters:\fP
.RS 4
\fIgoFlag\fP 
.br
\fIcheckPoint\fP 
.br
\fIoffset\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
The result of the comparison 
.RE
.PP
Definition at line 1517 of file utility.cpp.
.PP
References EnvelopeBuilder(), and Random::Rand().
.SS "string CharSequence (int offset)"
.PP
This function returns the value of the (n)th element in a sequence of chars 
.PP
\fBParameters:\fP
.RS 4
\fIThe\fP offset to use 
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the (n)th element 
.RE
.PP
Definition at line 1350 of file utility.cpp.
.PP
References DataIn::GenChars(), DataIn::intVect, DataIn::nameOf, and DataIn::ReadInts().
.SS "double Choose (double from, double to)"
.PP
This function chooses a random number in the given range (from-to) 
.PP
\fBParameters:\fP
.RS 4
\fIfrom\fP \fBBottom\fP of the range 
.br
\fIto\fP \fBTop\fP of the range 
.RE
.PP
Definition at line 209 of file utility.cpp.
.PP
References Random::Rand().
.SS "int ChooseA (double probs[], int size)"
.PP
This function chooses a value out of an array of probabilites 
.PP
\fBParameters:\fP
.RS 4
\fIprobs\fP The array of probabilites 
.br
\fIsize\fP The size of the array 
.RE
.PP
\fBReturns:\fP
.RS 4
The chosen value 
.RE
.PP
Definition at line 1607 of file utility.cpp.
.PP
References Random::Rand().
.SS "float ChooseFromList (float array[], int size)"
.PP
This function chooses a value from a list of floats. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP The array of floats 
.br
\fIsize\fP The size of the array 
.RE
.PP
\fBReturns:\fP
.RS 4
The chosen value 
.RE
.PP
Definition at line 1629 of file utility.cpp.
.PP
References Random::Rand().
.SS "int ChooseL (\fBList\fP< double > & aList, \fBList\fP< int > & bList)"
.PP
This function chooses an element from a list of integers by matching its probability of occurence stored in a corresponding list of doubles with a random number. 
.PP
\fBParameters:\fP
.RS 4
\fIbList\fP The list of integers 
.br
\fIaList\fP The list of doubles 
.RE
.PP
Definition at line 272 of file utility.cpp.
.PP
References List< Etype >::Head(), List< Etype >::Length(), Random::Rand(), and List< Etype >::Retrieve().
.SS "int ChooseOffset (int first, int second)"
.PP
This function chooses an appropriate offset based on what is read in. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP This argument is newObj in most cases 
.br
\fIsecond\fP This argument is type in most cases 
.RE
.PP
\fBReturns:\fP
.RS 4
The offset 
.RE
.PP
Definition at line 1295 of file utility.cpp.
.PP
Referenced by Event::Continuum3(), Event::NumObjs(), Bottom::OneStep(), and Event::Sweep3().
.SS "void Clear (double probArray[], int arraySize)"
.PP
This function clears the probability array. 
.PP
\fBParameters:\fP
.RS 4
\fIprobArray\fP The array of probabilites 
.br
\fIarraySize\fP The size of the array 
.RE
.PP
Definition at line 1734 of file utility.cpp.
.PP
References probArray.
.SS "void CumulArray (double array[], int size)"
.PP
This function takes an array of doubles, divides each element by the sum of all elements, and adds the value to the preceding value (sum of values) so that the values range from 0 to 1. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP An array of doubles 
.br
\fIsize\fP 
.RE
.PP
Definition at line 226 of file utility.cpp.
.PP
References Normalize().
.PP
Referenced by Patter::Equivalence().
.SS "void CumulWeights (\fBList\fP< double > & aList)"
.PP
This function takes each weight on the list, divides it by the sum and then adds it to a cumulative weight or probability. 
.PP
\fBParameters:\fP
.RS 4
\fIaList\fP A list of weights 
.RE
.PP
Definition at line 247 of file utility.cpp.
.PP
References List< Etype >::Head(), List< Etype >::Length(), List< Etype >::Normalize(), List< Etype >::Retrieve(), and List< Etype >::Update().
.SS "Envelope* EnvelopeBuilder (char * method, Collection< xy_point > * xy_pts, Collection< envelope_segment > * segs, double checkPoint, int offset, double check, int envNum, int numSegs)"
.PP
This function serves as a wrapper for the constructors of Envelope from LASS. This combines the previous utility methods of FitEnvelope, SelectEnvType, MakeEnvelope, and SegmentBuilder 
.PP
\fBParameters:\fP
.RS 4
\fImethod\fP A string to determine which method of creating the envelope will be usedPossible values are: SEG_BUILDER, SEGS_AND_POINTS, FROM_LIB_SCALE, FROM_LIB_NUM 
.br
\fIxy_pts\fP A collection of xy_points 
.br
\fIsegs\fP A collection of envelope segements 
.br
\fIcheckPoint\fP 
.br
\fIoffset\fP 
.br
\fIcheck\fP 
.br
\fIenvNum\fP The number of the envelope to load from the library 
.br
\fInumSegs\fP The number of segments 
.RE
.PP
\fBReturns:\fP
.RS 4
An Envelope 
.RE
.PP
\fBAuthor:\fP
.RS 4
Chris Ham 
.RE
.PP
Referenced by Chance(), Bottom::Modifiers(), Bottom::OneStep(), and ValueFloat().
.SS "Envelope* EnvelopeBuilder (char * method, Collection< xy_point > * xy_pts, Collection< envelope_segment > * segs, double checkPoint, int offset, double check, int envNum)"
.PP
METHOD: SEGMENT BUILDER /////////////////////////////
.PP
METHOD: SEGMENTS AND POINTS /////////////////////////////////
.PP
METHOD: LOAD FROM LIBRARY /////////////////////////////////// Definition at line 672 of file utility.cpp.
.PP
References envlib, DataIn::fileLoc(), DataIn::GenInts(), DataIn::gIntVect, ReadComputeChars(), ReadComputeFloat(), ReadComputeInt(), and DataIn::rewindFile().
.SS "float envValue (double checkPoint, int envNum, float coef)"
.PP
This function finds the value of an envelope at a given point. The envelope is loaded first (from an Envelope library) and then scaled according to a given coefficient. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP The point at which to check the envelope 
.br
\fIenvNum\fP The number of the envelope to load from the library 
.br
\fIcoef\fP The coefficient by which to scale the envelope 
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the envelope at the specified point 
.RE
.PP
\fBNote:\fP
.RS 4
THIS METHOD WILL SOON BE DEPRECATED. USE Envelope::GetScaledValue INSTEAD. 
.RE
.PP
Definition at line 1024 of file utility.cpp.
.PP
References envlib.
.SS "void* Evaluate (\fBFileValue\fP * value)"
.PP
Definition at line 1828 of file utility.cpp.
.PP
References FileValue::getNumber(), FileValue::getString(), FileValue::isList(), FileValue::isNumber(), and FileValue::isString().
.SS "double Exponential (int step, double extra)"
.PP
This function is the inverse exponential function to allow for an extra term (random) deviation. 
.PP
\fBParameters:\fP
.RS 4
\fIstep\fP 
.br
\fIextra\fP 
.RE
.PP
Definition at line 1746 of file utility.cpp.
.PP
Referenced by Bottom::Rules().
.SS "Envelope* FitEnvelope (double checkPoint, int offset)"
.PP
This function fits (scales) an envelope by a computed coefficient. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP 
.br
\fIoffset\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
An Envelope 
.RE
.PP
\fBNote:\fP
.RS 4
THIS METHOD WILL SOON BE DEPRECATED. USE \fBEnvelope::FitEnvelope\fP INSTEAD. 
.RE
.PP

.SS "void FlatDistribution (\fBList\fP< double > & aProbList)"
.PP
This function assigns even probabilities to a list. 
.PP
\fBParameters:\fP
.RS 4
\fIaProblist\fP A list of probabilities 
.RE
.PP

.SS "int FrequencyStep (double checkPoint, int newObj, int type, char * keepName)"
.PP
This function is used to find discrete values of a defined tuning 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP 
.br
\fInewObj\fP 
.br
\fItype\fP 
.br
\fIkeepName\fP 
.RE
.PP

.SS "void GSection (\fBList\fP< int > & aList, int levels)"
.PP
This function partitions a segment into golden mean ratios at multiple levels. 
.PP
\fBParameters:\fP
.RS 4
\fIaList\fP 
.br
\fIlevels\fP 
.RE
.PP
Definition at line 1420 of file utility.cpp.
.PP
References List< Etype >::Head(), List< Etype >::InsertInOrder(), and List< Etype >::Retrieve().
.PP
Referenced by Event::Stimes().
.SS "Envelope* MakeEnvelope (double checkPoint, int offset, double check)"
.PP
This function makes an envelope. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP 
.br
\fIoffset\fP 
.br
\fIcheck\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to an Envelope 
.RE
.PP
\fBNote:\fP
.RS 4
THIS METHOD WILL SOON BE DEPRECATED. USE \fBUtility::EnvelopeBuilder\fP INSTEAD. Use method = SEG_BUILDER with same parameters as here. 
.RE
.PP

.SS "void NonEnv ()"
.PP
This function skips a certain number of lines based on the method in the file. 
.SS "void NonReadCompute ()"
.PP
This function finds out by which method something is determined: by following a sequence, by choosing it from a list, by computing it or by picking a random value. Definition at line 534 of file utility.cpp.
.SS "void Normalize (double array[], int size)"
.PP
This function normalizes each element of the array by dividing it by the sum of the array. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP The array 
.br
\fIsize\fP The size of the array 
.RE
.PP
Definition at line 1782 of file utility.cpp.
.PP
References Sum().
.PP
Referenced by CumulArray(), and Sieve::CumulArray().
.SS "float PreferedValueDistribution (float value, double checkPoint)"
.PP
This function generates a probability 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP 
.br
\fIcheckPoint\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A probability 
.RE
.PP
Definition at line 1496 of file utility.cpp.
.PP
Referenced by Sieve::AddEnvelope().
.SS "double Randomizer ()"
.PP
This function computes a positive or negative percentage to be added to a value calculated through some other method. 
.PP
\fBReturns:\fP
.RS 4
The positive or negative percentage 
.RE
.PP

.SS "int RandomNumber (int lowNum, int highNum)\fC [static]\fP"
.PP
This function returns a random integer between lowNum and highNum. 
.PP
\fBParameters:\fP
.RS 4
\fIlowNum\fP The lower number 
.br
\fIhighNum\fP The higher number 
.RE
.PP
\fBReturns:\fP
.RS 4
A random integer between lowNum and highNum 
.RE
.PP

.SS "double RandomSource ()"
.PP
This function is a generic method for generating random numbers between 0 and 1 using a flat distribution. 
.PP
\fBReturns:\fP
.RS 4
A random number between 0 and 1 
.RE
.PP

.SS "double RandomTri (float low, float high)"
.PP
This function generates a random number with a triangular distribution 
.PP
\fBParameters:\fP
.RS 4
\fIlow\fP The minimum of the range 
.br
\fIhigh\fP The maximum of the range 
.RE
.PP
\fBReturns:\fP
.RS 4
A random number within the specified range 
.RE
.PP

.SS "double RandRange (float low, float high)"
.PP
This function generates a random number within a range (low to high) using a flat distribution. 
.PP
\fBParameters:\fP
.RS 4
\fIlow\fP The minimum of the range 
.br
\fIhigh\fP The maximum of the range 
.RE
.PP
\fBReturns:\fP
.RS 4
A random number within the specified range 
.RE
.PP

.SS "string ReadComputeChars (double checkPoint, int offset)"
.PP
This function finds out by which method a character value is determined: by reading it, by following a equence, by computing it using ValuePick, or by picking a random value within a given range. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP 
.br
\fIoffset\fP 
.RE
.PP
Definition at line 563 of file utility.cpp.
.PP
Referenced by EnvelopeBuilder().
.SS "float ReadComputeFloat (double checkPoint, int offset)"
.PP
This function finds out by which method a float value is determined: by following a sequence, by computing it using Stochos, or by picking a random value within a given range. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP 
.br
\fIoffset\fP 
.RE
.PP
Definition at line 496 of file utility.cpp.
.PP
Referenced by Patter::Chooser(), Event::Continuum3(), EnvelopeBuilder(), Event::NumObjs(), and Event::Sweep3().
.SS "int ReadComputeInt (double checkPoint, int offset)"
.PP
This function finds out by which method an integer value is determined: by reading it, by following a sequence, by computing it using ValuePick, or by picking a random value within a given range. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP 
.br
\fIoffset\fP 
.RE
.PP
Definition at line 458 of file utility.cpp.
.PP
Referenced by Event::Continuum3(), EnvelopeBuilder(), Bottom::Modifiers(), Event::NumObjs(), and Event::Sweep3().
.SS "Envelope* SegmentBuilder (double check)"
.PP
This function builds an envelope from scratch by creating a colllection of points (x,y) and a collection of segments. The xy collection is created with ReadComputeFloat calling Sequence; instead of the usual double checkPoint showing the point in time when the selection is made, the variable check (double) is used to indicate the position of this particular envelope between the rest of the enveloopes (as a ); the second parameter is the segment number. The file location is remembered and we return to it at the end of the loop to take care of the next segment, build from the same data. 
.PP
\fBParameters:\fP
.RS 4
\fIcheck\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to an Envelope 
.RE
.PP
\fBNote:\fP
.RS 4
THIS METHOD WILL SOON BE DEPRECATED. USE \fBUtility::EnvelopeBuilder\fP INSTEAD. Use method = SEG_BUILDER with same parameters as here. 
.RE
.PP

.SS "\fBFileValue\fP Select (std::list< \fBFileValue\fP > l, int n)"
.PP
Definition at line 1856 of file utility.cpp.
.PP
Referenced by Note::AssignLoudness(), Note::AssignPitch(), and FileValue::Evaluate().
.SS "Envelope* SelectEnvType (double checkPoint, int newObj, int type, double check, int offset, char * fileName)"
.PP
This function creates an envelope based on the given method. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP 
.br
\fInewObj\fP 
.br
\fItype\fP 
.br
\fIcheck\fP 
.br
\fIoffset\fP 
.br
\fIfileName\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to an Envelope 
.RE
.PP
\fBNote:\fP
.RS 4
THIS METHOD WILL SOON BE DEPRECATED. USE \fBUtility::EnvelopeBuilder\fP INSTEAD. Use method = SEG_BUILDER -OR- FROM_LIBRARY 
.RE
.PP

.SS "float Sequence (int offset)"
.PP
This function returns the value of the (n)th element in a sequence of floats 
.PP
\fBParameters:\fP
.RS 4
\fIThe\fP offset to use 
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the (n)th element 
.RE
.PP
Definition at line 1330 of file utility.cpp.
.PP
References DataIn::GenFloats(), DataIn::gFloatVect, DataIn::intVect, and DataIn::ReadInts().
.PP
Referenced by Bottom::ThreeStep().
.SS "float SoundsPerSec (float dens, int areas, int underOne)"
.PP
Definition at line 1401 of file utility.cpp.
.PP
Referenced by Event::NewNumObjs(), and Event::NumObjs().
.SS "float SoundsPerSec (float dens)"
.PP
This function maps an 'abstract' density of 0 - 1 onto a number of sounds per second by defining a total number of regions (areas) and the number of such areas with less than 1 sound/sec. (underOne). A common example:
.PP
areas 0 1 2 3 4 5 6 7 dens. 0.00 0.125 0.250 0.375 0.500 0.625 0.750 0.875 1.00 s/sec 1/16 1/8 1/4 1/2 1 2 4 8 16
.PP
Here, there are 8 areas (0-7) and 4 of them (0-3) include values of less than 1 sound/sec. By subtracting underOne, a dens = 0 is mapped onto a value of 1 sound every 16 sec. and not onto 0.
.PP
In most cases areas = 8 and underOne = 4 like in the above example. 
.PP
\fBParameters:\fP
.RS 4
\fIdens\fP The density 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of sounds per second 
.RE
.PP
Definition at line 1372 of file utility.cpp.
.SS "float Stochos (double checkPoint, int offset, const char * method, vector< Envelope * > envNums)"
.PP
Definition at line 385 of file utility.cpp.
.PP
References Random::Rand().
.PP
Referenced by FileValue::Evaluate().
.SS "float Stochos (double checkPoint, int offset, const char * method, vector< int > envNums, vector< float > scale)"
.PP
.SS "float Stochos (double checkPoint, int offset)"
.PP
Stochos. Reads 3 envelope numbers and 3 scaling factors and chooses a value using utility methods ValueFloat and envValue. The 'offset' points to the triplet needed at this moment given that there might be more than one type of elemets to be considered (such as 2,3,5 etc. types in a layer). 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP 
.br
\fIoffset\fP 
.RE
.PP

.SS "float Sum (double array[], int size)"
.PP
This function calculates the sum of the elements of the array. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP The array 
.br
\fIsize\fP The size of the array 
.RE
.PP
Definition at line 1763 of file utility.cpp.
.PP
Referenced by Normalize().
.SS "void TestLibrary ()"
.PP
This function is used for testing purposes. Definition at line 1798 of file utility.cpp.
.PP
References envlib, and sever.
.SS "float ValueFloat (double checkPoint, vector< int > envNum, vector< float > coef)"
.PP
Definition at line 169 of file utility.cpp.
.PP
References EnvelopeBuilder(), and Random::Rand().
.SS "float ValueFloat (double checkPoint, int envNum[], float coef[])"
.PP
This function assigns a float value to a parameter. It uses three envelopes and three scale factors: two to find the min and max values at a given time (checkPoint) and the third ones to define a distribution over this range. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP The given time 
.br
\fIenvNum\fP An array of envelope numbers 
.br
\fIcoef\fP An array of coefficients by which to scale the envelope 
.RE
.PP
Definition at line 133 of file utility.cpp.
.PP
References EnvelopeBuilder(), and Random::Rand().
.SS "int valuePick (double checkpoint, float absRange, Envelope * envLow, Envelope * envHigh, Envelope * envDist, const char * eMethod, vector< int > eArgVect, const char * wMethod, vector< int > wArgVect, const char * modifyMethod)"
.PP
Definition at line 103 of file utility.cpp.
.PP
References Sieve::Build(), and Sieve::Modify().
.PP
Referenced by FileValue::Evaluate().
.SS "int ValuePick (double checkPoint, float absRange)"
.PP
This function finds the lower and upper limits for a set of values at a given time (checkPoint). This is done by finding the values of envelopes for the min and max limits at the checkPoint. Builds a list of possible values within this range and assigns probabilities to them according to both a sieve and another envelope. Picks a value off a list of possible values (elements) by matching its weight or probability to a random number. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP The given time 
.br
\fIabsRange\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A value from the list of possible values 
.RE
.PP
Definition at line 58 of file utility.cpp.
.PP
Referenced by Event::Sweep3(), and Bottom::ThreeStep().
.SS "void Weights (double probArray[], int listLen)"
.PP
This function assigns probabilities according to a list provided by the user.
.PP
The HIERARCHIC option adds the weights associated with individual moduli to the same sieve element. Thus, the same element (eg. attack point) can have a weight which is the sum of a number of moduli, each with its own weight (probability).
.PP
The PERIODIC option cycles through the available weights creating a meter- like pattern. 
.PP
\fBParameters:\fP
.RS 4
\fIprobArray\fP An array of probabilities 
.br
\fIlistLen\fP The length of the list 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "double* \fBprobArray\fP"
.PP
Definition at line 450 of file utility.h.
.PP
Referenced by Clear().
.SS "int \fBsever\fP"
.PP
Definition at line 490 of file utility.h.
.PP
Referenced by Patter::Adjust(), Event::BuildSubEvents(), Patter::Chooser(), Patter::Delivery(), Patter::Distort(), Event::DurationMethods(), Sieve::Elements(), FileValue::Evaluate(), Patter::Expand(), Event::NewAttackMethods(), Event::NewDurationMethods(), Event::NewNumObjs(), Event::NumObjs(), Bottom::NumPart(), Patter::Nursery(), Event::PointsProbs(), Bottom::Rules(), Bottom::Spatialization(), Bottom::Spectrum(), Event::Sweep3(), Patter::Symmetries(), TestLibrary(), Event::TestNameType(), Bottom::ThreeStep(), and Sieve::Weights().
.SH "Author"
.PP 
Generated automatically by Doxygen for CMOD from the source code.
