.TH "utility.cpp" 3 "12 Feb 2007" "CMOD" \" -*- nroff -*-
.ad l
.nh
.SH NAME
utility.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include '../../LASS/src/lib.h'\fP
.br
\fC#include 'dataIn.h'\fP
.br
\fC#include 'define.h'\fP
.br
\fC#include 'linkList.h'\fP
.br
\fC#include 'patter.h'\fP
.br
\fC#include 'sieve.h'\fP
.br
\fC#include 'utility.h'\fP
.br
\fC#include <list>\fP
.br
\fC#include 'random.h'\fP
.br
\fC#include <math.h>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <cstdlib>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBValuePick\fP (double checkPoint, float absRange)"
.br
.ti -1c
.RI "int \fBvaluePick\fP (double checkpoint, float absRange, Envelope *envLow, Envelope *envHigh, Envelope *envDist, const  char *eMethod, vector< int > eArgVect, const  char *wMethod, vector< int > wArgVect, const  char *modifyMethod)"
.br
.ti -1c
.RI "float \fBValueFloat\fP (double checkPoint, int envNum[], float coef[])"
.br
.ti -1c
.RI "float \fBValueFloat\fP (double checkPoint, vector< int > envNum, vector< float > coef)"
.br
.ti -1c
.RI "double \fBChoose\fP (double from, double to)"
.br
.ti -1c
.RI "void \fBCumulArray\fP (double array[], int size)"
.br
.ti -1c
.RI "void \fBCumulWeights\fP (\fBList\fP< double > &wList)"
.br
.ti -1c
.RI "int \fBChooseL\fP (\fBList\fP< double > &aList, \fBList\fP< int > &bList)"
.br
.ti -1c
.RI "float \fBStochos\fP (double checkPoint, int offset, const  char *method, vector< Envelope * > envNums)"
.br
.ti -1c
.RI "int \fBReadComputeInt\fP (double checkPoint, int offset)"
.br
.ti -1c
.RI "float \fBReadComputeFloat\fP (double checkPoint, int offset)"
.br
.ti -1c
.RI "void \fBNonReadCompute\fP ()"
.br
.ti -1c
.RI "string \fBReadComputeChars\fP (double checkPoint, int offset)"
.br
.ti -1c
.RI "Envelope * \fBEnvelopeBuilder\fP (char *method, Collection< xy_point > *xy_pts, Collection< envelope_segment > *segs, double checkPoint, int offset, double check, int envNum)"
.br
.ti -1c
.RI "Envelope * \fBEnvelopeBuilder\fP (const  char *method, Collection< xy_point > *xy_pts, Collection< envelope_segment > *segs, double checkPoint, int offset, double check, int envNum, int numSegs)"
.br
.ti -1c
.RI "float \fBenvValue\fP (double checkPoint, int envNum, float coef)"
.br
.ti -1c
.RI "int \fBChooseOffset\fP (int first, int second)"
.br
.ti -1c
.RI "float \fBSequence\fP (int offset)"
.br
.ti -1c
.RI "string \fBCharSequence\fP (int offset)"
.br
.ti -1c
.RI "float \fBSoundsPerSec\fP (float dens)"
.br
.ti -1c
.RI "float \fBSoundsPerSec\fP (float dens, int areas, int underOne)"
.br
.ti -1c
.RI "void \fBGSection\fP (\fBList\fP< int > &aList, int levels)"
.br
.ti -1c
.RI "float \fBPreferedValueDistribution\fP (float value, double checkPoint)"
.br
.ti -1c
.RI "bool \fBChance\fP (int goFlag, double checkPoint, int offset)"
.br
.ti -1c
.RI "bool \fBChance\fP (double checkPoint, Envelope *chanceEnv)"
.br
.ti -1c
.RI "int \fBChooseA\fP (double probs[], int size)"
.br
.ti -1c
.RI "float \fBChooseFromList\fP (float array[], int size)"
.br
.ti -1c
.RI "void \fBClear\fP (double \fBprobArray\fP[], int arraySize)"
.br
.ti -1c
.RI "double \fBExponential\fP (int step, double extra)"
.br
.ti -1c
.RI "float \fBSum\fP (double array[], int size)"
.br
.ti -1c
.RI "void \fBNormalize\fP (double array[], int size)"
.br
.ti -1c
.RI "void \fBTestLibrary\fP ()"
.br
.ti -1c
.RI "void * \fBEvaluate\fP (\fBFileValue\fP *value)"
.br
.ti -1c
.RI "\fBFileValue\fP \fBSelect\fP (std::list< \fBFileValue\fP > l, int n)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int * \fBtable\fP"
.br
.ti -1c
.RI "int \fBtableSize\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "bool Chance (double checkPoint, Envelope * chanceEnv)"
.PP
Definition at line 1558 of file utility.cpp.
.PP
References Random::Rand().
.PP
Referenced by Bottom::Modifiers(), Bottom::Reverberation(), and Bottom::Spatialization().
.SS "bool Chance (int goFlag, double checkPoint, int offset)"
.PP
Returns a value of TRUE or FALSE for the comparison: randomNumber <= probability and it is used to force one of these values. The goFlag is initialized to 0 for the first time Chance is called. If the probability (which is read in) has the value of -1 (< 0), it is assigned the value of the goFlag (either 0 or 1) thus influencing the outcome of the next call. The value of 1 is assigned (in the calling function, not in here) if the comparison was successful (TRUE). If 0 < probability < 1 the outcome depends of the comparison with randomNumber. If the probability > 1 it becomes 0 if goFlag = 1, i.e. if a similar param has already been assigned.
.PP
In the case of parameters which are dependent of one another, the first (influencing) parameter should have a probability assigned while the subsequent (dependent) parameters should be assigned a value < 0.
.PP
In the case of competing aspects of the same parameter (e.g. glissando and detuning) the second one is selected ONLY if the first one was not. 
.PP
\fBParameters:\fP
.RS 4
\fIgoFlag\fP 
.br
\fIcheckPoint\fP 
.br
\fIoffset\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
The result of the comparison 
.RE
.PP
Definition at line 1517 of file utility.cpp.
.SS "string CharSequence (int offset)"
.PP
This function returns the value of the (n)th element in a sequence of chars 
.PP
\fBParameters:\fP
.RS 4
\fIThe\fP offset to use 
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the (n)th element 
.RE
.PP
Definition at line 1350 of file utility.cpp.
.PP
References DataIn::GenChars(), DataIn::intVect, DataIn::nameOf, and DataIn::ReadInts().
.SS "double Choose (double from, double to)"
.PP
This function chooses a random number in the given range (from-to) 
.PP
\fBParameters:\fP
.RS 4
\fIfrom\fP \fBBottom\fP of the range 
.br
\fIto\fP \fBTop\fP of the range 
.RE
.PP
Definition at line 209 of file utility.cpp.
.PP
References Random::Rand().
.SS "int ChooseA (double probs[], int size)"
.PP
This function chooses a value out of an array of probabilites 
.PP
\fBParameters:\fP
.RS 4
\fIprobs\fP The array of probabilites 
.br
\fIsize\fP The size of the array 
.RE
.PP
\fBReturns:\fP
.RS 4
The chosen value 
.RE
.PP
Definition at line 1607 of file utility.cpp.
.PP
References Random::Rand().
.SS "float ChooseFromList (float array[], int size)"
.PP
This function chooses a value from a list of floats. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP The array of floats 
.br
\fIsize\fP The size of the array 
.RE
.PP
\fBReturns:\fP
.RS 4
The chosen value 
.RE
.PP
Definition at line 1629 of file utility.cpp.
.PP
References Random::Rand().
.SS "int ChooseL (\fBList\fP< double > & aList, \fBList\fP< int > & bList)"
.PP
This function chooses an element from a list of integers by matching its probability of occurence stored in a corresponding list of doubles with a random number. 
.PP
\fBParameters:\fP
.RS 4
\fIbList\fP The list of integers 
.br
\fIaList\fP The list of doubles 
.RE
.PP
Definition at line 272 of file utility.cpp.
.PP
References List< Etype >::Head(), List< Etype >::Length(), Random::Rand(), and List< Etype >::Retrieve().
.SS "int ChooseOffset (int first, int second)"
.PP
This function chooses an appropriate offset based on what is read in. 
.PP
\fBParameters:\fP
.RS 4
\fIfirst\fP This argument is newObj in most cases 
.br
\fIsecond\fP This argument is type in most cases 
.RE
.PP
\fBReturns:\fP
.RS 4
The offset 
.RE
.PP
Definition at line 1295 of file utility.cpp.
.PP
Referenced by Event::Continuum3(), Event::NumObjs(), Bottom::OneStep(), and Event::Sweep3().
.SS "void Clear (double probArray[], int arraySize)"
.PP
This function clears the probability array. 
.PP
\fBParameters:\fP
.RS 4
\fIprobArray\fP The array of probabilites 
.br
\fIarraySize\fP The size of the array 
.RE
.PP
Definition at line 1734 of file utility.cpp.
.PP
References probArray.
.SS "void CumulArray (double array[], int size)"
.PP
This function takes an array of doubles, divides each element by the sum of all elements, and adds the value to the preceding value (sum of values) so that the values range from 0 to 1. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP An array of doubles 
.br
\fIsize\fP 
.RE
.PP
Definition at line 226 of file utility.cpp.
.PP
References Normalize().
.PP
Referenced by Patter::Equivalence().
.SS "void CumulWeights (\fBList\fP< double > & aList)"
.PP
This function takes each weight on the list, divides it by the sum and then adds it to a cumulative weight or probability. 
.PP
\fBParameters:\fP
.RS 4
\fIaList\fP A list of weights 
.RE
.PP
Definition at line 247 of file utility.cpp.
.PP
References List< Etype >::Head(), List< Etype >::Length(), List< Etype >::Normalize(), List< Etype >::Retrieve(), and List< Etype >::Update().
.SS "Envelope* EnvelopeBuilder (const char * method, Collection< xy_point > * xy_pts, Collection< envelope_segment > * segs, double checkPoint, int offset, double check, int envNum, int numSegs)"
.PP
METHOD: SEGMENT BUILDER /////////////////////////////
.PP
METHOD: SEGMENTS AND POINTS /////////////////////////////////
.PP
METHOD: LOAD FROM LIBRARY /////////////////////////////////// Definition at line 860 of file utility.cpp.
.PP
References envlib, ReadComputeChars(), ReadComputeFloat(), and ReadComputeInt().
.SS "Envelope* EnvelopeBuilder (char * method, Collection< xy_point > * xy_pts, Collection< envelope_segment > * segs, double checkPoint, int offset, double check, int envNum)"
.PP
METHOD: SEGMENT BUILDER /////////////////////////////
.PP
METHOD: SEGMENTS AND POINTS /////////////////////////////////
.PP
METHOD: LOAD FROM LIBRARY /////////////////////////////////// Definition at line 672 of file utility.cpp.
.SS "float envValue (double checkPoint, int envNum, float coef)"
.PP
This function finds the value of an envelope at a given point. The envelope is loaded first (from an Envelope library) and then scaled according to a given coefficient. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP The point at which to check the envelope 
.br
\fIenvNum\fP The number of the envelope to load from the library 
.br
\fIcoef\fP The coefficient by which to scale the envelope 
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the envelope at the specified point 
.RE
.PP
\fBNote:\fP
.RS 4
THIS METHOD WILL SOON BE DEPRECATED. USE Envelope::GetScaledValue INSTEAD. 
.RE
.PP
Definition at line 1024 of file utility.cpp.
.PP
References envlib.
.SS "void* Evaluate (\fBFileValue\fP * value)"
.PP
Definition at line 1828 of file utility.cpp.
.PP
References FileValue::getNumber(), FileValue::getString(), FileValue::isList(), FileValue::isNumber(), and FileValue::isString().
.SS "double Exponential (int step, double extra)"
.PP
This function is the inverse exponential function to allow for an extra term (random) deviation. 
.PP
\fBParameters:\fP
.RS 4
\fIstep\fP 
.br
\fIextra\fP 
.RE
.PP
Definition at line 1746 of file utility.cpp.
.PP
Referenced by Bottom::Rules().
.SS "void GSection (\fBList\fP< int > & aList, int levels)"
.PP
This function partitions a segment into golden mean ratios at multiple levels. 
.PP
\fBParameters:\fP
.RS 4
\fIaList\fP 
.br
\fIlevels\fP 
.RE
.PP
Definition at line 1420 of file utility.cpp.
.PP
References List< Etype >::Head(), List< Etype >::InsertInOrder(), and List< Etype >::Retrieve().
.PP
Referenced by Event::Stimes().
.SS "void NonReadCompute ()"
.PP
This function finds out by which method something is determined: by following a sequence, by choosing it from a list, by computing it or by picking a random value. Definition at line 534 of file utility.cpp.
.SS "void Normalize (double array[], int size)"
.PP
This function normalizes each element of the array by dividing it by the sum of the array. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP The array 
.br
\fIsize\fP The size of the array 
.RE
.PP
Definition at line 1782 of file utility.cpp.
.PP
References Sum().
.PP
Referenced by Sieve::CumulArray(), and CumulArray().
.SS "float PreferedValueDistribution (float value, double checkPoint)"
.PP
This function generates a probability 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP 
.br
\fIcheckPoint\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A probability 
.RE
.PP
Definition at line 1496 of file utility.cpp.
.PP
Referenced by Sieve::AddEnvelope().
.SS "string ReadComputeChars (double checkPoint, int offset)"
.PP
This function finds out by which method a character value is determined: by reading it, by following a equence, by computing it using ValuePick, or by picking a random value within a given range. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP 
.br
\fIoffset\fP 
.RE
.PP
Definition at line 563 of file utility.cpp.
.PP
Referenced by EnvelopeBuilder().
.SS "float ReadComputeFloat (double checkPoint, int offset)"
.PP
This function finds out by which method a float value is determined: by following a sequence, by computing it using Stochos, or by picking a random value within a given range. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP 
.br
\fIoffset\fP 
.RE
.PP
Definition at line 496 of file utility.cpp.
.PP
Referenced by Patter::Chooser(), Event::Continuum3(), EnvelopeBuilder(), Event::NumObjs(), and Event::Sweep3().
.SS "int ReadComputeInt (double checkPoint, int offset)"
.PP
This function finds out by which method an integer value is determined: by reading it, by following a sequence, by computing it using ValuePick, or by picking a random value within a given range. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP 
.br
\fIoffset\fP 
.RE
.PP
Definition at line 458 of file utility.cpp.
.PP
Referenced by Event::Continuum3(), EnvelopeBuilder(), Bottom::Modifiers(), Event::NumObjs(), and Event::Sweep3().
.SS "\fBFileValue\fP Select (std::list< \fBFileValue\fP > l, int n)"
.PP
Definition at line 1856 of file utility.cpp.
.PP
Referenced by Note::AssignLoudness(), Note::AssignPitch(), and FileValue::Evaluate().
.SS "float Sequence (int offset)"
.PP
This function returns the value of the (n)th element in a sequence of floats 
.PP
\fBParameters:\fP
.RS 4
\fIThe\fP offset to use 
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the (n)th element 
.RE
.PP
Definition at line 1330 of file utility.cpp.
.PP
References DataIn::GenFloats(), DataIn::gFloatVect, DataIn::intVect, and DataIn::ReadInts().
.PP
Referenced by Bottom::ThreeStep().
.SS "float SoundsPerSec (float dens, int areas, int underOne)"
.PP
Definition at line 1401 of file utility.cpp.
.PP
Referenced by Event::NewNumObjs(), and Event::NumObjs().
.SS "float SoundsPerSec (float dens)"
.PP
This function maps an 'abstract' density of 0 - 1 onto a number of sounds per second by defining a total number of regions (areas) and the number of such areas with less than 1 sound/sec. (underOne). A common example:
.PP
areas 0 1 2 3 4 5 6 7 dens. 0.00 0.125 0.250 0.375 0.500 0.625 0.750 0.875 1.00 s/sec 1/16 1/8 1/4 1/2 1 2 4 8 16
.PP
Here, there are 8 areas (0-7) and 4 of them (0-3) include values of less than 1 sound/sec. By subtracting underOne, a dens = 0 is mapped onto a value of 1 sound every 16 sec. and not onto 0.
.PP
In most cases areas = 8 and underOne = 4 like in the above example. 
.PP
\fBParameters:\fP
.RS 4
\fIdens\fP The density 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of sounds per second 
.RE
.PP
Definition at line 1372 of file utility.cpp.
.SS "float Stochos (double checkPoint, int offset, const char * method, vector< Envelope * > envNums)"
.PP
Definition at line 385 of file utility.cpp.
.PP
References Random::Rand().
.PP
Referenced by FileValue::Evaluate().
.SS "float Sum (double array[], int size)"
.PP
This function calculates the sum of the elements of the array. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP The array 
.br
\fIsize\fP The size of the array 
.RE
.PP
Definition at line 1763 of file utility.cpp.
.PP
Referenced by Normalize().
.SS "void TestLibrary ()"
.PP
This function is used for testing purposes. Definition at line 1798 of file utility.cpp.
.PP
References envlib, and sever.
.SS "float ValueFloat (double checkPoint, vector< int > envNum, vector< float > coef)"
.PP
Definition at line 169 of file utility.cpp.
.PP
References EnvelopeBuilder(), and Random::Rand().
.SS "float ValueFloat (double checkPoint, int envNum[], float coef[])"
.PP
This function assigns a float value to a parameter. It uses three envelopes and three scale factors: two to find the min and max values at a given time (checkPoint) and the third ones to define a distribution over this range. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP The given time 
.br
\fIenvNum\fP An array of envelope numbers 
.br
\fIcoef\fP An array of coefficients by which to scale the envelope 
.RE
.PP
Definition at line 133 of file utility.cpp.
.SS "int valuePick (double checkpoint, float absRange, Envelope * envLow, Envelope * envHigh, Envelope * envDist, const char * eMethod, vector< int > eArgVect, const char * wMethod, vector< int > wArgVect, const char * modifyMethod)"
.PP
Definition at line 103 of file utility.cpp.
.PP
References Sieve::Build(), and Sieve::Modify().
.PP
Referenced by FileValue::Evaluate().
.SS "int ValuePick (double checkPoint, float absRange)"
.PP
This function finds the lower and upper limits for a set of values at a given time (checkPoint). This is done by finding the values of envelopes for the min and max limits at the checkPoint. Builds a list of possible values within this range and assigns probabilities to them according to both a sieve and another envelope. Picks a value off a list of possible values (elements) by matching its weight or probability to a random number. 
.PP
\fBParameters:\fP
.RS 4
\fIcheckPoint\fP The given time 
.br
\fIabsRange\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A value from the list of possible values 
.RE
.PP
Definition at line 58 of file utility.cpp.
.PP
Referenced by Event::Sweep3(), and Bottom::ThreeStep().
.SH "Variable Documentation"
.PP 
.SS "int* \fBtable\fP"
.PP
Definition at line 47 of file utility.cpp.
.SS "int \fBtableSize\fP"
.PP
Definition at line 48 of file utility.cpp.
.SH "Author"
.PP 
Generated automatically by Doxygen for CMOD from the source code.
